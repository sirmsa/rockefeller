@page "/analytics"

@inject IAnalyticsService AnalyticsService

<div class="rockefeller-p-6">
    <h1 class="rockefeller-title">
        <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Large" style="margin-right: 16px;" />
        AI Performance Analytics
    </h1>
    
    <!-- AI Performance Overview -->
    <div class="rockefeller-grid rockefeller-grid-4 rockefeller-mb-6">
        <div class="rockefeller-metric">
            <div class="rockefeller-metric-icon" style="color: var(--rockefeller-success);">
                <MudIcon Icon="@Icons.Material.Filled.SmartToy" Size="Size.Large" />
            </div>
            <div class="rockefeller-metric-value rockefeller-text-success">@analyticsData.TotalReturn.ToString("P2")</div>
            <div class="rockefeller-metric-label">AI Total Return</div>
        </div>
        
        <div class="rockefeller-metric">
            <div class="rockefeller-metric-icon" style="color: var(--rockefeller-primary);">
                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Large" />
            </div>
            <div class="rockefeller-metric-value" style="color: var(--rockefeller-primary);">@analyticsData.WinRate.ToString("P1")</div>
            <div class="rockefeller-metric-label">Signal Accuracy</div>
        </div>
        
        <div class="rockefeller-metric">
            <div class="rockefeller-metric-icon" style="color: var(--rockefeller-info);">
                <MudIcon Icon="@Icons.Material.Filled.Analytics" Size="Size.Large" />
            </div>
            <div class="rockefeller-metric-value" style="color: var(--rockefeller-info);">@analyticsData.TotalTrades</div>
            <div class="rockefeller-metric-label">AI Decisions</div>
        </div>
        
        <div class="rockefeller-metric">
            <div class="rockefeller-metric-icon" style="color: var(--rockefeller-warning);">
                <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Large" />
            </div>
            <div class="rockefeller-metric-value" style="color: var(--rockefeller-warning);">@analyticsData.AverageHoldTime</div>
            <div class="rockefeller-metric-label">Avg Decision Time</div>
        </div>
    </div>

    <!-- Performance Chart -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">Performance Over Time</h2>
        <MudChart ChartType="ChartType.Line" ChartSeries="@chartSeries" XAxisLabels="@xAxisLabels" Width="100%" Height="300px" />
    </div>

    <!-- AI Trading Decisions -->
    <div class="rockefeller-card rockefeller-mb-6">
        <div class="rockefeller-table-header">
            <h2 class="rockefeller-subtitle">
                <MudIcon Icon="@Icons.Material.Filled.SmartToy" Size="Size.Small" style="margin-right: 8px;" />
                Recent AI Trading Decisions
            </h2>
            <div class="rockefeller-table-actions">
                <MudTextField @bind-Value="searchString" 
                             Placeholder="Search trades..." 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Class="rockefeller-search-field" 
                             Immediate="true"
                             Clearable="true" />
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                               Color="Color.Primary" 
                               Variant="Variant.Outlined"
                               OnClick="@RefreshTrades"
                               Class="rockefeller-btn-icon" />
                <MudIconButton Icon="@Icons.Material.Filled.Download" 
                               Color="Color.Secondary" 
                               Variant="Variant.Outlined"
                               OnClick="@ExportTrades"
                               Class="rockefeller-btn-icon" />
            </div>
        </div>
        
        <MudTable @ref="tradesTable"
                  Items="@analyticsData.RecentTrades" 
                  Filter="@(new Func<Trade,bool>(FilterTrades))"
                  SortLabel="Sort By"
                  Hover="true" 
                  Striped="true" 
                  Elevation="0" 
                  Class="rockefeller-table-enhanced"
                  Dense="false"
                  FixedHeader="true"
                  Height="600px">
            
            <!-- Pagination Settings -->
            <PagerContent>
                <MudTablePager PageSizeOptions="@([10, 25, 50, 100])" 
                               HideRowsPerPage="false"
                               HidePagination="false"
                               InfoFormat="{first_item}-{last_item} of {all_items} trades"
                               Class="rockefeller-table-pager" />
            </PagerContent>
            
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.EntryTime))">
                    <span class="rockefeller-text-secondary">Date</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.Symbol))">
                    <span class="rockefeller-text-secondary">Symbol</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.Type))">
                    <span class="rockefeller-text-secondary">Type</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.EntryPrice))">
                    <span class="rockefeller-text-secondary">Entry Price</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.ExitPrice ?? 0))">
                    <span class="rockefeller-text-secondary">Exit Price</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.PnL))">
                    <span class="rockefeller-text-secondary">P&L</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><MudTableSortLabel SortBy="@(new Func<Trade, object>(x=>x.Duration))">
                    <span class="rockefeller-text-secondary">Duration</span>
                </MudTableSortLabel></MudTh>
                
                <MudTh><span class="rockefeller-text-secondary">AI Confidence</span></MudTh>
                <MudTh><span class="rockefeller-text-secondary">Actions</span></MudTh>
            </HeaderContent>
            
            <RowTemplate>
                <MudTd DataLabel="Date">
                    <div class="rockefeller-table-cell">
                        <div class="rockefeller-text-primary">@context.EntryTime.ToString("MMM dd, yyyy")</div>
                        <div class="rockefeller-text-secondary rockefeller-text-sm">@context.EntryTime.ToString("HH:mm:ss")</div>
                    </div>
                </MudTd>
                
                <MudTd DataLabel="Symbol">
                    <MudChip Icon="@GetSymbolIcon(context.Symbol)" 
                             Color="Color.Primary" 
                             Size="Size.Small"
                             Class="rockefeller-symbol-chip">
                        @context.Symbol
                    </MudChip>
                </MudTd>
                
                <MudTd DataLabel="Type">
                    <MudChip Icon="@(context.Type == "Long" ? Icons.Material.Filled.TrendingUp : Icons.Material.Filled.TrendingDown)"
                             Color="@(context.Type == "Long" ? Color.Success : Color.Error)" 
                             Size="Size.Small"
                             Class="rockefeller-position-chip">
                        @context.Type
                    </MudChip>
                </MudTd>
                
                <MudTd DataLabel="Entry Price">
                    <span class="rockefeller-price rockefeller-text-mono">$@context.EntryPrice.ToString("F4")</span>
                </MudTd>
                
                <MudTd DataLabel="Exit Price">
                    <span class="rockefeller-price rockefeller-text-mono">
                        @(context.ExitPrice?.ToString("$0.0000") ?? "Open")
                    </span>
                </MudTd>
                
                <MudTd DataLabel="P&L">
                    <div class="rockefeller-pnl-container">
                        <span class="rockefeller-pnl @(context.PnL >= 0 ? "positive" : "negative")">
                            @(context.PnL >= 0 ? "+" : "")@context.PnL.ToString("F2")
                        </span>
                        <div class="rockefeller-pnl-percentage">
                            @(GetPnLPercentage(context).ToString("F1"))%
                        </div>
                    </div>
                </MudTd>
                
                <MudTd DataLabel="Duration">
                    <span class="rockefeller-text-mono rockefeller-duration">@context.Duration</span>
                </MudTd>
                
                <MudTd DataLabel="AI Confidence">
                    <div class="rockefeller-confidence-container">
                        <MudProgressLinear Color="@GetConfidenceColor(GetAIConfidence(context))" 
                                           Value="@GetAIConfidence(context)" 
                                           Size="Size.Small"
                                           Class="rockefeller-confidence-bar" />
                        <span class="rockefeller-confidence-text">@GetAIConfidence(context)%</span>
                    </div>
                </MudTd>
                
                <MudTd DataLabel="Actions">
                    <div class="rockefeller-table-actions">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                       Size="Size.Small" 
                                       Color="Color.Primary"
                                       OnClick="@(() => ViewTradeDetails(context))"
                                       Class="rockefeller-action-btn" />
                        <MudIconButton Icon="@Icons.Material.Filled.Analytics" 
                                       Size="Size.Small" 
                                       Color="Color.Secondary"
                                       OnClick="@(() => AnalyzeTrade(context))"
                                       Class="rockefeller-action-btn" />
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                       Size="Size.Small" 
                                       Color="Color.Info"
                                       OnClick="@(() => CopyTradeSettings(context))"
                                       Class="rockefeller-action-btn" />
                    </div>
                </MudTd>
            </RowTemplate>
            
            <NoRecordsContent>
                <div class="rockefeller-no-data">
                    <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" />
                    <MudText Typo="Typo.h6">No trading decisions found</MudText>
                    <MudText Typo="Typo.body2">Try adjusting your search or refresh the data</MudText>
                </div>
            </NoRecordsContent>
            
            <LoadingContent>
                <div class="rockefeller-loading">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Typo="Typo.body2">Loading AI trading decisions...</MudText>
                </div>
            </LoadingContent>
        </MudTable>
    </div>

    <!-- ROI Analysis -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">
            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" style="margin-right: 8px;" />
            ROI Performance Analysis
        </h2>
        
        <div class="rockefeller-grid rockefeller-grid-4 rockefeller-mb-4">
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-success);">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value rockefeller-text-success">+24.7%</div>
                <div class="rockefeller-metric-label">Total ROI</div>
            </div>
            
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-info);">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value rockefeller-text-success">+8.3%</div>
                <div class="rockefeller-metric-label">Monthly ROI</div>
            </div>
            
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-warning);">
                    <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value rockefeller-text-danger">-2.1%</div>
                <div class="rockefeller-metric-label">Weekly ROI</div>
            </div>
            
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-primary);">
                    <MudIcon Icon="@Icons.Material.Filled.Today" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value" style="color: var(--rockefeller-primary);">+6.8%</div>
                <div class="rockefeller-metric-label">Daily ROI</div>
            </div>
        </div>
        
        <div class="rockefeller-grid rockefeller-grid-3">
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-success);">
                    <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value rockefeller-text-success">+156.8%</div>
                <div class="rockefeller-metric-label">Annualized ROI</div>
            </div>
            
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-info);">
                    <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value rockefeller-text-primary">+12.5%</div>
                <div class="rockefeller-metric-label">Avg Trade ROI</div>
            </div>
            
            <div class="rockefeller-metric">
                <div class="rockefeller-metric-icon" style="color: var(--rockefeller-warning);">
                    <MudIcon Icon="@Icons.Material.Filled.Timeline" Size="Size.Large" />
                </div>
                <div class="rockefeller-metric-value rockefeller-text-warning">+45.2%</div>
                <div class="rockefeller-metric-label">Best Month ROI</div>
            </div>
        </div>
    </div>
    
    <!-- AI Model Performance -->
    <div class="rockefeller-grid rockefeller-grid-2">
        <div class="rockefeller-card">
            <h3 class="rockefeller-heading">
                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" style="margin-right: 8px;" />
                AI Model ROI
            </h3>
            <MudList>
                @foreach (StrategyPerformance strategy in analyticsData.StrategyPerformance)
                {
                    <MudListItem>
                        <div class="rockefeller-flex-between">
                            <div>
                                <div class="rockefeller-text-primary" style="font-weight: 600;">@strategy.Name</div>
                                <div class="rockefeller-text-secondary" style="font-size: var(--rockefeller-text-sm);">
                                    @strategy.TradeCount Trades • ROI: @((strategy.Return * 100).ToString("F1"))%
                                </div>
                            </div>
                            <div class="rockefeller-text-right">
                                <div class="rockefeller-pnl positive" style="font-size: var(--rockefeller-text-lg);">
                                    @strategy.Return.ToString("P2")
                                </div>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
        
        <div class="rockefeller-card">
            <h3 class="rockefeller-heading">
                <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Small" style="margin-right: 8px;" />
                Risk-Adjusted ROI
            </h3>
            <MudList>
                <MudListItem>
                    <div class="rockefeller-flex-between">
                        <span class="rockefeller-text-primary" style="font-weight: 600;">Sharpe Ratio</span>
                        <span class="rockefeller-text-mono rockefeller-text-primary">@analyticsData.SharpeRatio.ToString("F2")</span>
                    </div>
                </MudListItem>
                <MudListItem>
                    <div class="rockefeller-flex-between">
                        <span class="rockefeller-text-primary" style="font-weight: 600;">ROI per Risk Unit</span>
                        <span class="rockefeller-text-mono rockefeller-text-success">+4.8%</span>
                    </div>
                </MudListItem>
                <MudListItem>
                    <div class="rockefeller-flex-between">
                        <span class="rockefeller-text-primary" style="font-weight: 600;">Max Drawdown</span>
                        <span class="rockefeller-text-mono rockefeller-text-danger">@analyticsData.MaxDrawdown.ToString("P2")</span>
                    </div>
                </MudListItem>
                <MudListItem>
                    <div class="rockefeller-flex-between">
                        <span class="rockefeller-text-primary" style="font-weight: 600;">Volatility</span>
                        <span class="rockefeller-text-mono rockefeller-text-secondary">@analyticsData.Volatility.ToString("P2")</span>
                    </div>
                </MudListItem>
                <MudListItem>
                    <div class="rockefeller-flex-between">
                        <span class="rockefeller-text-primary" style="font-weight: 600;">Calmar Ratio</span>
                        <span class="rockefeller-text-mono rockefeller-text-primary">2.34</span>
                    </div>
                </MudListItem>
            </MudList>
        </div>
    </div>
</div>

@code {
    private AnalyticsData analyticsData = new();
    private List<MudBlazor.ChartSeries> chartSeries = [];
    private string[] xAxisLabels = [];
    
    // Table pagination and filtering
    private MudTable<Trade>? tradesTable;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            analyticsData = await AnalyticsService.GetAnalyticsDataAsync();
            InitializeChartData();
        }
        catch (Exception ex)
        {
            // Log the error and provide fallback data
            Console.WriteLine($"Error loading analytics data: {ex.Message}");
            
            // Provide fallback data to prevent crashes
            analyticsData = new AnalyticsData
            {
                TotalReturn = 0.0m,
                WinRate = 0.0m,
                TotalTrades = 0,
                AverageHoldTime = "0 days",
                SharpeRatio = 0.0m,
                MaxDrawdown = 0.0m,
                Volatility = 0.0m,
                RecentTrades = [],
                StrategyPerformance = [],
                PerformanceHistory = new PerformanceHistory { Points = [] }
            };
            
            InitializeChartData();
        }
    }

    private void InitializeChartData()
    {
        try
        {
            chartSeries = [];
            
            if (analyticsData?.PerformanceHistory?.Points != null && analyticsData.PerformanceHistory.Points.Any())
            {
                            chartSeries.Add(new MudBlazor.ChartSeries
            {
                Name = "Portfolio Value",
                Data = analyticsData.PerformanceHistory.Points.Select(p => (double)p.Value).ToArray()
            });

                xAxisLabels = analyticsData.PerformanceHistory.Points.Select(p => p.Date.ToString("MMM dd")).ToArray();
            }
            else
            {
                // Provide fallback chart data
                chartSeries.Add(new MudBlazor.ChartSeries
                {
                    Name = "Portfolio Value",
                    Data = [100, 105, 103, 108, 110, 112, 115]
                });

                xAxisLabels = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing chart data: {ex.Message}");
            
            // Provide minimal fallback data
            chartSeries =
            [
                new MudBlazor.ChartSeries
                {
                    Name = "Portfolio Value",
                    Data = [100]
                }
            ];
            xAxisLabels = ["Today"];
        }
    }
    
    // Table filtering method
    private bool FilterTrades(Trade trade) => FilterFunc(trade, searchString);
    
    private static bool FilterFunc(Trade trade, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }
            
        var searchTerm = searchString.ToLowerInvariant();
        
        try
        {
            return (trade.Symbol?.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                   (trade.Type?.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                   (trade.Duration?.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                   trade.EntryTime.ToString("MMM dd, yyyy").ToLowerInvariant().Contains(searchTerm);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering trade: {ex.Message}");
            return false;
        }
    }
    
    // Table action methods
    private async Task RefreshTrades()
    {
        try
        {
            analyticsData = await AnalyticsService.GetAnalyticsDataAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing trades: {ex.Message}");
            // Could add user notification here in the future
        }
    }
    
    private void ExportTrades()
    {
        // TODO: Implement export functionality
        // Could export to CSV, Excel, etc.
    }
    
    private void ViewTradeDetails(Trade trade)
    {
        // TODO: Open trade details dialog
    }
    
    private void AnalyzeTrade(Trade trade)
    {
        // TODO: Open AI analysis dialog for this trade
    }
    
    private void CopyTradeSettings(Trade trade)
    {
        // TODO: Copy trade settings to new trade configuration
    }
    
    // Helper methods for enhanced display
    private string GetSymbolIcon(string symbol)
    {
        return symbol.ToUpperInvariant() switch
        {
            "BTC" or "BTCUSDT" => Icons.Material.Filled.CurrencyBitcoin,
            "ETH" or "ETHUSDT" => Icons.Material.Filled.Token,
            "ADA" or "ADAUSDT" => Icons.Material.Filled.AccountBalanceWallet,
            "SOL" or "SOLUSDT" => Icons.Material.Filled.WbSunny,
            "DOGE" or "DOGEUSDT" => Icons.Material.Filled.Pets,
            "DOT" or "DOTUSDT" => Icons.Material.Filled.FiberManualRecord,
            _ => Icons.Material.Filled.TrendingUp
        };
    }
    
    private decimal GetPnLPercentage(Trade trade)
    {
        if (trade == null || trade.EntryPrice == 0) return 0;
        
        try
        {
            var exitPrice = trade.ExitPrice ?? trade.EntryPrice; // Use entry price if still open
            var percentage = ((exitPrice - trade.EntryPrice) / trade.EntryPrice) * 100;
            
            return trade.Type == "Long" ? percentage : -percentage;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating PnL percentage: {ex.Message}");
            return 0;
        }
    }
    
    private int GetAIConfidence(Trade trade)
    {
        try
        {
            // Generate a confidence level based on trade performance
            // In a real implementation, this would come from the Trade model
            var pnlPercentage = Math.Abs(GetPnLPercentage(trade));
            
            return pnlPercentage switch
            {
                >= 10 => 95,
                >= 5 => 85,
                >= 2 => 75,
                >= 1 => 65,
                _ => 55
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating AI confidence: {ex.Message}");
            return 50;
        }
    }
    
    private static Color GetConfidenceColor(int confidence)
    {
        return confidence switch
        {
            >= 80 => Color.Success,
            >= 60 => Color.Warning,
            _ => Color.Error
        };
    }
}
