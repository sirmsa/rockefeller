@page "/settings"
@using Microsoft.Maui.Storage
@inject IPreferences Preferences

<div class="rockefeller-p-6">
    <h1 class="rockefeller-title">
        <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Large" style="margin-right: 16px;" />
        Rockefeller-AI Configuration
    </h1>
    
    <!-- Binance API Configuration -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">Binance API Configuration</h2>
        <p class="rockefeller-text-secondary rockefeller-mb-4">
            Configure your Binance API credentials for trading operations. Keep these secure and never share them.
        </p>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="apiKey" 
                             Label="API Key" 
                             Variant="Variant.Outlined" 
                             Class="mb-3"
                             InputType="InputType.Password"
                             AdornmentIcon="@Icons.Material.Filled.Key"
                             Adornment="Adornment.Start" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="secretKey" 
                             Label="Secret Key" 
                             Variant="Variant.Outlined" 
                             Class="mb-3"
                             InputType="InputType.Password"
                             AdornmentIcon="@Icons.Material.Filled.Lock"
                             Adornment="Adornment.Start" />
            </MudItem>
        </MudGrid>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="testnetUrl" 
                             Label="Testnet URL (Optional)" 
                             Variant="Variant.Outlined" 
                             Class="mb-3"
                             AdornmentIcon="@Icons.Material.Filled.Link"
                             Adornment="Adornment.Start"
                             Placeholder="https://testnet.binance.vision" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="environment" 
                           Label="Environment" 
                           Variant="Variant.Outlined" 
                           Class="mb-3"
                           AdornmentIcon="@Icons.Material.Filled.Cloud"
                           Adornment="Adornment.Start">
                    <MudSelectItem Value="@("live")">Live Trading</MudSelectItem>
                    <MudSelectItem Value="@("testnet")">Testnet</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        
        <div class="rockefeller-flex rockefeller-gap-3 rockefeller-mt-4">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="SaveApiSettings"
                       StartIcon="@Icons.Material.Filled.Save"
                       Class="rockefeller-btn-primary">
                Save Settings
            </MudButton>
            
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Secondary" 
                       OnClick="TestConnection"
                       StartIcon="@Icons.Material.Filled.Wifi"
                       Class="rockefeller-btn-secondary">
                Test Connection
            </MudButton>
            
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Error" 
                       OnClick="ClearSettings"
                       StartIcon="@Icons.Material.Filled.Clear"
                       Class="rockefeller-btn-outline">
                Clear Settings
            </MudButton>
        </div>
    </div>
    
    <!-- AI Configuration -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">
            <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" style="margin-right: 8px;" />
            AI Engine Settings
        </h2>
        <p class="rockefeller-text-secondary rockefeller-mb-4">
            Configure the AI analysis engine for news sentiment, social media monitoring, and trading signals.
        </p>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="aiConfidenceThreshold" 
                           Label="Minimum AI Confidence" 
                           Variant="Variant.Outlined" 
                           Class="mb-3"
                           AdornmentIcon="@Icons.Material.Filled.Psychology"
                           Adornment="Adornment.Start">
                    <MudSelectItem Value="@(60)">60% - Conservative</MudSelectItem>
                    <MudSelectItem Value="@(70)">70% - Moderate</MudSelectItem>
                    <MudSelectItem Value="@(80)">80% - Aggressive</MudSelectItem>
                    <MudSelectItem Value="@(90)">90% - Very Aggressive</MudSelectItem>
                </MudSelect>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="aiAnalysisSpeed" 
                           Label="Analysis Speed" 
                           Variant="Variant.Outlined" 
                           Class="mb-3"
                           AdornmentIcon="@Icons.Material.Filled.Speed"
                           Adornment="Adornment.Start">
                    <MudSelectItem Value="@("fast")">Fast (5 min intervals)</MudSelectItem>
                    <MudSelectItem Value="@("medium")">Medium (15 min intervals)</MudSelectItem>
                    <MudSelectItem Value="@("slow")">Slow (30 min intervals)</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="enableNewsAnalysis" 
                             Label="News Sentiment Analysis" 
                             Color="Color.Primary" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="enableSocialMediaAnalysis" 
                             Label="Social Media Monitoring" 
                             Color="Color.Primary" />
            </MudItem>
        </MudGrid>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="enableTechnicalAnalysis" 
                             Label="Technical Indicator Analysis" 
                             Color="Color.Primary" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="enableAutoTrading" 
                             Label="Automated Trading" 
                             Color="Color.Primary" />
            </MudItem>
        </MudGrid>
        
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   OnClick="SaveAISettings"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="rockefeller-btn-primary rockefeller-mt-3">
            Save AI Settings
        </MudButton>
    </div>
    
    <!-- Risk Management -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">
            <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Small" style="margin-right: 8px;" />
            Risk Management
        </h2>
        <p class="rockefeller-text-secondary rockefeller-mb-4">
            Configure safety measures and circuit breakers to protect your portfolio.
        </p>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudNumericField T="decimal" @bind-Value="dailyLossLimit" 
                                 Label="Daily Loss Limit ($)" 
                                 Variant="Variant.Outlined" 
                                 Class="mb-3"
                                 Min="100m" Max="10000m" Step="100m"
                                 AdornmentIcon="@Icons.Material.Filled.MoneyOff"
                                 Adornment="Adornment.Start" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField T="decimal" @bind-Value="maxPositionSize" 
                                 Label="Max Position Size (%)" 
                                 Variant="Variant.Outlined" 
                                 Class="mb-3"
                                 Min="1m" Max="50m" Step="1m"
                                 AdornmentIcon="@Icons.Material.Filled.PieChart"
                                 Adornment="Adornment.Start" />
            </MudItem>
        </MudGrid>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="enableCircuitBreaker" 
                             Label="Enable Circuit Breaker" 
                             Color="Color.Primary" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="enableAuditLogging" 
                             Label="Enable Audit Logging" 
                             Color="Color.Primary" />
            </MudItem>
        </MudGrid>
        
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   OnClick="SaveRiskSettings"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="rockefeller-btn-primary rockefeller-mt-3">
            Save Risk Settings
        </MudButton>
    </div>
    
    <!-- Trading Preferences -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">Trading Preferences</h2>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudNumericField T="decimal" @bind-Value="defaultPositionSize" 
                                 Label="Default Position Size (%)" 
                                 Variant="Variant.Outlined" 
                                 Class="mb-3"
                                 Min="0.1m" Max="100m" Step="0.1m"
                                 AdornmentIcon="@Icons.Material.Filled.PieChart"
                                 Adornment="Adornment.Start" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField T="decimal" @bind-Value="stopLossPercentage" 
                                 Label="Default Stop Loss (%)" 
                                 Variant="Variant.Outlined" 
                                 Class="mb-3"
                                 Min="0.1m" Max="50m" Step="0.1m"
                                 AdornmentIcon="@Icons.Material.Filled.Stop"
                                 Adornment="Adornment.Start" />
            </MudItem>
        </MudGrid>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudNumericField T="decimal" @bind-Value="takeProfitPercentage" 
                                 Label="Default Take Profit (%)" 
                                 Variant="Variant.Outlined" 
                                 Class="mb-3"
                                 Min="0.1m" Max="200m" Step="0.1m"
                                 AdornmentIcon="@Icons.Material.Filled.TrendingUp"
                                 Adornment="Adornment.Start" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="riskLevel" 
                           Label="Risk Level" 
                           Variant="Variant.Outlined" 
                           Class="mb-3"
                           AdornmentIcon="@Icons.Material.Filled.Security"
                           Adornment="Adornment.Start">
                    <MudSelectItem Value="@("conservative")">Conservative</MudSelectItem>
                    <MudSelectItem Value="@("moderate")">Moderate</MudSelectItem>
                    <MudSelectItem Value="@("aggressive")">Aggressive</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   OnClick="SaveTradingPreferences"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="rockefeller-btn-primary rockefeller-mt-3">
            Save Trading Preferences
        </MudButton>
    </div>
    
    <!-- Notifications -->
    <div class="rockefeller-card rockefeller-mb-6">
        <h2 class="rockefeller-subtitle">Notifications</h2>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="emailNotifications" 
                             Label="Email Notifications" 
                             Color="Color.Primary" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="pushNotifications" 
                             Label="Push Notifications" 
                             Color="Color.Primary" />
            </MudItem>
        </MudGrid>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="tradeAlerts" 
                             Label="Trade Alerts" 
                             Color="Color.Primary" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Value="performanceReports" 
                             Label="Performance Reports" 
                             Color="Color.Primary" />
            </MudItem>
        </MudGrid>
        
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   OnClick="SaveNotificationSettings"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="rockefeller-btn-primary rockefeller-mt-3">
            Save Notification Settings
        </MudButton>
    </div>
    
    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="rockefeller-status rockefeller-status-@(statusSeverity == Severity.Success ? "success" : statusSeverity == Severity.Warning ? "warning" : statusSeverity == Severity.Error ? "danger" : "info") rockefeller-mt-4">
            @statusMessage
        </div>
    }
</div>

@code {
    // API Settings
    private string apiKey = string.Empty;
    private string secretKey = string.Empty;
    private string testnetUrl = string.Empty;
    private string environment = "live";
    
    // AI Configuration
    private int aiConfidenceThreshold = 70;
    private string aiAnalysisSpeed = "medium";
    private bool enableNewsAnalysis = true;
    private bool enableSocialMediaAnalysis = true;
    private bool enableTechnicalAnalysis = true;
    private bool enableAutoTrading = false;
    
    // Risk Management
    private decimal dailyLossLimit = 1000m;
    private decimal maxPositionSize = 10m;
    private bool enableCircuitBreaker = true;
    private bool enableAuditLogging = true;
    
    // Trading Preferences
    private decimal defaultPositionSize = 5.0m;
    private decimal stopLossPercentage = 2.0m;
    private decimal takeProfitPercentage = 6.0m;
    private string riskLevel = "moderate";
    
    // Notifications
    private bool emailNotifications = true;
    private bool pushNotifications = true;
    private bool tradeAlerts = true;
    private bool performanceReports = false;
    
    // Status
    private string statusMessage = string.Empty;
    private Severity statusSeverity = Severity.Info;
    
    protected override void OnInitialized()
    {
        LoadSettings();
    }
    
    private void LoadSettings()
    {
        // Load API Settings
        apiKey = Preferences.Get("binance_api_key", string.Empty);
        secretKey = Preferences.Get("binance_secret_key", string.Empty);
        testnetUrl = Preferences.Get("binance_testnet_url", string.Empty);
        environment = Preferences.Get("binance_environment", "live");
        
        // Load AI Configuration
        aiConfidenceThreshold = Preferences.Get("ai_confidence_threshold", 70);
        aiAnalysisSpeed = Preferences.Get("ai_analysis_speed", "medium");
        enableNewsAnalysis = Preferences.Get("ai_news_analysis", true);
        enableSocialMediaAnalysis = Preferences.Get("ai_social_media_analysis", true);
        enableTechnicalAnalysis = Preferences.Get("ai_technical_analysis", true);
        enableAutoTrading = Preferences.Get("ai_auto_trading", false);
        
        // Load Risk Management Settings
        dailyLossLimit = Preferences.Get("risk_daily_loss_limit", 1000m);
        maxPositionSize = Preferences.Get("risk_max_position_size", 10m);
        enableCircuitBreaker = Preferences.Get("risk_circuit_breaker", true);
        enableAuditLogging = Preferences.Get("risk_audit_logging", true);
        
        // Load Trading Preferences
        defaultPositionSize = Preferences.Get("trading_position_size", 5.0m);
        stopLossPercentage = Preferences.Get("trading_stop_loss", 2.0m);
        takeProfitPercentage = Preferences.Get("trading_take_profit", 6.0m);
        riskLevel = Preferences.Get("trading_risk_level", "moderate");
        
        // Load Notification Settings
        emailNotifications = Preferences.Get("notifications_email", true);
        pushNotifications = Preferences.Get("notifications_push", true);
        tradeAlerts = Preferences.Get("notifications_trade_alerts", true);
        performanceReports = Preferences.Get("notifications_performance_reports", false);
    }
    
    private void SaveApiSettings()
    {
        Preferences.Set("binance_api_key", apiKey);
        Preferences.Set("binance_secret_key", secretKey);
        Preferences.Set("binance_testnet_url", testnetUrl);
        Preferences.Set("binance_environment", environment);
        
        ShowStatus("API settings saved successfully!", Severity.Success);
    }
    
    private void SaveAISettings()
    {
        Preferences.Set("ai_confidence_threshold", aiConfidenceThreshold);
        Preferences.Set("ai_analysis_speed", aiAnalysisSpeed);
        Preferences.Set("ai_news_analysis", enableNewsAnalysis);
        Preferences.Set("ai_social_media_analysis", enableSocialMediaAnalysis);
        Preferences.Set("ai_technical_analysis", enableTechnicalAnalysis);
        Preferences.Set("ai_auto_trading", enableAutoTrading);
        
        ShowStatus("AI settings saved successfully!", Severity.Success);
    }
    
    private void SaveRiskSettings()
    {
        Preferences.Set("risk_daily_loss_limit", dailyLossLimit);
        Preferences.Set("risk_max_position_size", maxPositionSize);
        Preferences.Set("risk_circuit_breaker", enableCircuitBreaker);
        Preferences.Set("risk_audit_logging", enableAuditLogging);
        
        ShowStatus("Risk management settings saved successfully!", Severity.Success);
    }
    
    private void SaveTradingPreferences()
    {
        Preferences.Set("trading_position_size", defaultPositionSize);
        Preferences.Set("trading_stop_loss", stopLossPercentage);
        Preferences.Set("trading_take_profit", takeProfitPercentage);
        Preferences.Set("trading_risk_level", riskLevel);
        
        ShowStatus("Trading preferences saved successfully!", Severity.Success);
    }
    
    private void SaveNotificationSettings()
    {
        Preferences.Set("notifications_email", emailNotifications);
        Preferences.Set("notifications_push", pushNotifications);
        Preferences.Set("notifications_trade_alerts", tradeAlerts);
        Preferences.Set("notifications_performance_reports", performanceReports);
        
        ShowStatus("Notification settings saved successfully!", Severity.Success);
    }
    
    private async Task TestConnection()
    {
        if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(secretKey))
        {
            ShowStatus("Please enter API key and secret key first.", Severity.Warning);
            return;
        }
        
        ShowStatus("Testing connection...", Severity.Info);
        
        // Simulate connection test
        await Task.Delay(2000);
        
        ShowStatus("Connection test completed successfully!", Severity.Success);
    }
    
    private void ClearSettings()
    {
        Preferences.Remove("binance_api_key");
        Preferences.Remove("binance_secret_key");
        Preferences.Remove("binance_testnet_url");
        Preferences.Remove("binance_environment");
        
        apiKey = string.Empty;
        secretKey = string.Empty;
        testnetUrl = string.Empty;
        environment = "live";
        
        ShowStatus("API settings cleared successfully!", Severity.Info);
    }
    
    private void ShowStatus(string message, Severity severity)
    {
        statusMessage = message;
        statusSeverity = severity;
        StateHasChanged();
        
        // Auto-hide status after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            statusMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }
}
