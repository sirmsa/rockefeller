@using Microsoft.Maui.Storage

<div class="rockefeller-container">
    <div class="rockefeller-main-content @(isDrawerOpen ? "drawer-open" : "")">
        <h1 class="rockefeller-title">Rockefeller-AI Trading System</h1>
        
        <!-- Symbol Selection & Profile Management -->
        <SymbolSelector 
            SelectedSymbol="selectedSymbol"
            ActiveProfileName="activeProfileName"
            AvailableSymbols="availableSymbols"
            TradingProfiles="tradingProfiles"
            SymbolLoadingStates="symbolLoadingStates"
            OnNewProfileRequested="OpenProfileDialog"
            OnProfileActivated="ActivateProfile"
            OnApplyProfileRequested="ApplyProfile" />
        
        <!-- Profile Overview -->
        <ProfileOverview 
            ActiveProfile="GetActiveProfile()"
            OnManageSymbolsRequested="OpenSymbolSettingsDialog" />
        
        <!-- Trading Status -->
        <TradingStatus 
            SelectedSymbol="selectedSymbol"
            ActiveProfile="GetActiveProfile()"
            IsTradingActive="isTradingActive"
            TradingStartTime="tradingStartTime"
            ActivePositionsCount="activePositions.Count" />
        
        <!-- Analysis Status -->
        <AnalysisStatus 
            SelectedSymbol="selectedSymbol"
            IsInitialAnalysisInProgress="isInitialAnalysisInProgress"
            SymbolLoadingStates="symbolLoadingStates"
            SymbolAnalysisCache="selectedSymbol != null && symbolAnalysisCache.ContainsKey(selectedSymbol) ? symbolAnalysisCache[selectedSymbol] : null"
            MarketSentimentCache="selectedSymbol != null && marketSentimentCache.ContainsKey(selectedSymbol) ? marketSentimentCache[selectedSymbol] : null"
            OnRetryAnalysis="RetryAnalysis" />
        
        <!-- Trading Controls -->
        <TradingControls 
            SelectedSymbol="selectedSymbol"
            IsTradingActive="isTradingActive"
            ActiveProfile="GetActiveProfile()"
            OnTradingButtonClicked="HandleTradingButtonClick"
            OnOpenLongPosition="OpenLongPosition"
            OnOpenShortPosition="OpenShortPosition"
            OnAnalyzeSymbol="AnalyzeSymbol"
            OnViewSymbolHistory="ViewSymbolHistory" />
        
        <!-- Analytics Drawer Toggle -->
        <div class="rockefeller-drawer-toggle">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="ToggleDrawer"
                       StartIcon="@Icons.Material.Filled.Analytics"
                       Class="rockefeller-btn-primary">
                @(isDrawerOpen ? "Hide Analytics" : "Show Analytics")
            </MudButton>
        </div>
    </div>
    
    <!-- Analytics Drawer -->
    <AnalyticsDrawer 
        IsOpen="isDrawerOpen"
        OnClose="ToggleDrawer"
        PortfolioValue="GetActiveProfile()?.InitialPortfolioValue ?? 0"
        PortfolioChange24h="2.5m"
        ActivePositionsCount="activePositions.Count"
        WinRate="65.5m"
        ProfitFactor="1.85m"
        MaxDrawdown="8.2m"
        SignalAccuracy="72.3m"
        AverageConfidence="78.5m"
        SignalsToday="12"
        BtcPrice="43256.78m"
        EthPrice="2847.65m"
        SolPrice="98.45m" />
</div>

<!-- Profile Creation Dialog -->
<ProfileCreationDialog 
    @bind-IsVisible="isProfileDialogOpen"
    NewProfile="newProfile"
    OnSaveRequested="SaveProfile" />

<!-- Symbol Settings Dialog -->
<SymbolSettingsDialog 
    @bind-IsVisible="isSymbolSettingsDialogOpen"
    ActiveProfile="GetActiveProfile()"
    OnSaveRequested="SaveSymbolSettings"
    OnCustomizeSettingsRequested="CustomizeSymbolSettings" />

<!-- Stop Trading Dialog -->
<StopTradingDialog 
    @bind-IsVisible="isStopTradingDialogOpen"
    ProfileName="GetActiveProfile()?.Name"
    OpenPositions="activePositions"
    OnStopTradingConfirmed="HandleStopTradingConfirmed" />

@code {
    // State variables
    private string? selectedSymbol;
    private string activeProfileName = string.Empty;
    private bool isDrawerOpen = false;
    private bool isTradingActive = false;
    private DateTime? tradingStartTime;
    private List<global::Rockefeller.Components.Rockefeller.Position> activePositions = new();
    
    // Dialog states
    private bool isProfileDialogOpen = false;
    private bool isSymbolSettingsDialogOpen = false;
    private bool isStopTradingDialogOpen = false;
    
    // Analysis cache
    private Dictionary<string, SymbolAnalysisCache> symbolAnalysisCache = new();
    private Dictionary<string, MarketSentimentCache> marketSentimentCache = new();
    private Dictionary<string, SymbolLoadingState> symbolLoadingStates = new();
    private bool isInitialAnalysisInProgress = false;
    
    // Data
    private List<string> availableSymbols = new();
    private List<TradingProfile> tradingProfiles = new();
    private TradingProfile newProfile = new();
    
    // Trading engine
    private System.Threading.Timer? tradingTimer;
    private Random random = new();
    
    protected override void OnInitialized()
    {
        InitializeSymbols();
        InitializeTradingProfiles();
        LoadTradingProfiles();
    }
    
    public void Dispose()
    {
        tradingTimer?.Dispose();
    }
    
    private void InitializeSymbols()
    {
        availableSymbols = ["BTC/USDT", "ETH/USDT", "XRP/USDT", "SOL/USDT", "ADA/USDT"];
        
        foreach (var symbol in availableSymbols)
        {
            symbolLoadingStates[symbol] = SymbolLoadingState.NoData;
            symbolAnalysisCache[symbol] = new();
            marketSentimentCache[symbol] = new();
        }
    }
    
    private void InitializeTradingProfiles()
    {
        tradingProfiles = new List<TradingProfile>
        {
            new TradingProfile
            {
                Name = "Conservative",
                RiskLevel = RiskLevel.Conservative,
                InitialPortfolioValue = 10000.0m,
                MaxTotalPositions = 3,
                MinAIConfidence = 80,
                EnableAutoTrading = false,
                Description = "Low risk, low reward strategy"
            },
            new TradingProfile
            {
                Name = "Moderate",
                RiskLevel = RiskLevel.Moderate,
                InitialPortfolioValue = 10000.0m,
                MaxTotalPositions = 5,
                MinAIConfidence = 70,
                EnableAutoTrading = true,
                Description = "Balanced risk and reward"
            },
            new TradingProfile
            {
                Name = "Aggressive",
                RiskLevel = RiskLevel.Aggressive,
                InitialPortfolioValue = 10000.0m,
                MaxTotalPositions = 8,
                MinAIConfidence = 60,
                EnableAutoTrading = true,
                Description = "High risk, high reward strategy"
            }
        };
        
        // Set first profile as active
        if (tradingProfiles.Any())
        {
            tradingProfiles[0].IsActive = true;
            activeProfileName = tradingProfiles[0].Name;
        }
        
        // Initialize symbol settings for each profile
        InitializeConservativeSymbolSettings();
        InitializeModerateSymbolSettings();
        InitializeAggressiveSymbolSettings();
    }
    
    private void InitializeConservativeSymbolSettings()
    {
        var profile = tradingProfiles.FirstOrDefault(p => p.Name == "Conservative");
        if (profile != null)
        {
            foreach (var symbol in availableSymbols)
            {
                profile.SymbolSettings[symbol] = new SymbolSettings
                {
                    Symbol = symbol,
                    PositionSize = 2.0m,
                    StopLoss = 1.5m,
                    TakeProfit = 4.0m,
                    MaxPositions = 2,
                    IsActive = true
                };
            }
        }
    }
    
    private void InitializeModerateSymbolSettings()
    {
        var profile = tradingProfiles.FirstOrDefault(p => p.Name == "Moderate");
        if (profile != null)
        {
            foreach (var symbol in availableSymbols)
            {
                profile.SymbolSettings[symbol] = new SymbolSettings
                {
                    Symbol = symbol,
                    PositionSize = 5.0m,
                    StopLoss = 2.0m,
                    TakeProfit = 6.0m,
                    MaxPositions = 3,
                    IsActive = true
                };
            }
        }
    }
    
    private void InitializeAggressiveSymbolSettings()
    {
        var profile = tradingProfiles.FirstOrDefault(p => p.Name == "Aggressive");
        if (profile != null)
        {
            foreach (var symbol in availableSymbols)
            {
                profile.SymbolSettings[symbol] = new SymbolSettings
                {
                    Symbol = symbol,
                    PositionSize = 8.0m,
                    StopLoss = 3.0m,
                    TakeProfit = 10.0m,
                    MaxPositions = 4,
                    IsActive = true
                };
            }
        }
    }
    
    private TradingProfile? GetActiveProfile()
    {
        return tradingProfiles.FirstOrDefault(p => p.IsActive);
    }
    
    private void ActivateProfile(string profileName)
    {
        foreach (var profile in tradingProfiles)
        {
            profile.IsActive = profile.Name == profileName;
        }
        activeProfileName = profileName;
        SaveTradingProfiles();
    }
    
    private void OpenProfileDialog()
    {
        newProfile = new TradingProfile();
        isProfileDialogOpen = true;
    }
    
    private void SaveProfile(TradingProfile profile)
    {
        profile.CreatedAt = DateTime.Now;
        tradingProfiles.Add(profile);
        SaveTradingProfiles();
        StateHasChanged();
    }
    
    private void OpenSymbolSettingsDialog()
    {
        isSymbolSettingsDialogOpen = true;
    }
    
    private void SaveSymbolSettings(TradingProfile profile)
    {
        var existingProfile = tradingProfiles.FirstOrDefault(p => p.Name == profile.Name);
        if (existingProfile != null)
        {
            existingProfile.InitialPortfolioValue = profile.InitialPortfolioValue;
            existingProfile.MaxTotalPositions = profile.MaxTotalPositions;
            existingProfile.SymbolSettings = profile.SymbolSettings;
            SaveTradingProfiles();
        }
    }
    
    private void CustomizeSymbolSettings(SymbolSettings settings)
    {
        // Handle custom symbol settings
    }
    
    private void ApplyProfile()
    {
        // Apply the selected profile to the selected symbol
        StateHasChanged();
    }
    
    private void HandleTradingButtonClick()
    {
        if (isTradingActive)
        {
            OpenStopTradingDialog();
        }
        else
        {
            StartTrading();
        }
    }
    
    private void StartTrading()
    {
        if (selectedSymbol == null || GetActiveProfile() == null) return;
        
        if (!HasValidAnalysisCache(selectedSymbol))
        {
            PerformInitialAnalysis(selectedSymbol);
        }
        
        isTradingActive = true;
        tradingStartTime = DateTime.Now;
        
        // Start trading timer
        tradingTimer = new System.Threading.Timer(CheckAndExecuteTrades, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
        
        StateHasChanged();
    }
    
    private void OpenStopTradingDialog()
    {
        isStopTradingDialogOpen = true;
    }
    
    private void HandleStopTradingConfirmed(StopTradingOption option)
    {
        switch (option)
        {
            case StopTradingOption.Cancel:
                // Do nothing, keep trading
                break;
            case StopTradingOption.ClosePositions:
                CloseAllPositions();
                StopTrading();
                break;
            case StopTradingOption.WaitForCompletion:
                StopTradingWithPositionsOpen();
                break;
        }
    }
    
    private void CloseAllPositions()
    {
        activePositions.Clear();
        StateHasChanged();
    }
    
    private void StopTrading()
    {
        isTradingActive = false;
        tradingTimer?.Dispose();
        tradingTimer = null;
        StateHasChanged();
    }
    
    private void StopTradingWithPositionsOpen()
    {
        isTradingActive = false;
        tradingTimer?.Dispose();
        tradingTimer = null;
        
        // Keep monitoring positions but don't open new ones
        StateHasChanged();
    }
    
    private void ToggleDrawer()
    {
        isDrawerOpen = !isDrawerOpen;
        StateHasChanged();
    }
    
    private bool HasValidAnalysisCache(string symbol)
    {
        if (!symbolAnalysisCache.ContainsKey(symbol) || !marketSentimentCache.ContainsKey(symbol))
            return false;
        
        var today = DateTime.Today;
        return symbolAnalysisCache[symbol].AnalysisTime.Date == today && 
               marketSentimentCache[symbol].AnalysisTime.Date == today;
    }
    
    private async void PerformInitialAnalysis(string symbol)
    {
        symbolLoadingStates[symbol] = SymbolLoadingState.Loading;
        isInitialAnalysisInProgress = true;
        StateHasChanged();
        
        // Simulate analysis delay
        await Task.Delay(2000);
        
        var technicalAnalysis = await PerformTechnicalAnalysis(symbol);
        var marketSentiment = await PerformMarketSentimentAnalysis(symbol);
        
        UpdateAnalysisCache(symbol, technicalAnalysis, marketSentiment);
        
        symbolLoadingStates[symbol] = SymbolLoadingState.AnalysisComplete;
        isInitialAnalysisInProgress = false;
        StateHasChanged();
    }
    
    private async Task<SymbolAnalysisCache> PerformTechnicalAnalysis(string symbol)
    {
        await Task.Delay(100); // Simulate async operation
        
        return new SymbolAnalysisCache
        {
            Symbol = symbol,
            AnalysisTime = DateTime.Now,
            MarketTrend = random.Next(0, 2) == 0 ? "BULLISH" : "BEARISH",
            AIConfidence = random.Next(65, 95),
            CurrentPrice = random.Next(1000, 50000),
            PriceChange24h = random.Next(-15, 16)
        };
    }
    
    private async Task<MarketSentimentCache> PerformMarketSentimentAnalysis(string symbol)
    {
        await Task.Delay(100); // Simulate async operation
        
        return new MarketSentimentCache
        {
            Symbol = symbol,
            MarketMood = random.Next(0, 2) == 0 ? "OPTIMISTIC" : "CAUTIOUS"
        };
    }
    
    private void UpdateAnalysisCache(string symbol, SymbolAnalysisCache technicalAnalysis, MarketSentimentCache marketSentiment)
    {
        symbolAnalysisCache[symbol] = technicalAnalysis;
        marketSentimentCache[symbol] = marketSentiment;
    }
    
    private void RetryAnalysis()
    {
        if (selectedSymbol != null)
        {
            PerformInitialAnalysis(selectedSymbol);
        }
    }
    
    private void OpenLongPosition()
    {
        if (selectedSymbol == null || GetActiveProfile() == null) return;
        
        var position = new global::Rockefeller.Components.Rockefeller.Position
        {
            Symbol = selectedSymbol,
            Side = "LONG",
            Size = 1.0m,
            UnrealizedROI = 0.0m
        };
        
        activePositions.Add(position);
        StateHasChanged();
    }
    
    private void OpenShortPosition()
    {
        if (selectedSymbol == null || GetActiveProfile() == null) return;
        
        var position = new global::Rockefeller.Components.Rockefeller.Position
        {
            Symbol = selectedSymbol,
            Side = "SHORT",
            Size = 1.0m,
            UnrealizedROI = 0.0m
        };
        
        activePositions.Add(position);
        StateHasChanged();
    }
    
    private void AnalyzeSymbol()
    {
        if (selectedSymbol != null)
        {
            PerformInitialAnalysis(selectedSymbol);
        }
    }
    
    private void ViewSymbolHistory()
    {
        // Implement symbol history view
    }
    
    private void CheckAndExecuteTrades(object? state)
    {
        if (!isTradingActive || selectedSymbol == null || GetActiveProfile() == null) return;
        
        // Simulate trade execution
        if (random.Next(0, 100) < 20) // 20% chance of trade
        {
            ExecuteTrade();
        }
        
        // Update existing positions
        UpdatePositions();
    }
    
    private void ExecuteTrade()
    {
        if (selectedSymbol == null || GetActiveProfile() == null) return;
        
        var side = random.Next(0, 2) == 0 ? "LONG" : "SHORT";
        var position = new global::Rockefeller.Components.Rockefeller.Position
        {
            Symbol = selectedSymbol,
            Side = side,
            Size = 1.0m,
            UnrealizedROI = 0.0m
        };
        
        activePositions.Add(position);
        
        InvokeAsync(StateHasChanged);
    }
    
    private void UpdatePositions()
    {
        foreach (var position in activePositions)
        {
            position.UnrealizedROI = random.Next(-10, 11);
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private void LoadTradingProfiles()
    {
        try
        {
            var profilesJson = Microsoft.Maui.Storage.Preferences.Get("TradingProfiles", "");
            if (!string.IsNullOrEmpty(profilesJson))
            {
                // Load profiles from preferences
            }
        }
        catch
        {
            // Use default profiles if loading fails
        }
    }
    
    private void SaveTradingProfiles()
    {
        try
        {
            // Save profiles to preferences
            Microsoft.Maui.Storage.Preferences.Set("TradingProfiles", "");
        }
        catch
        {
            // Handle save error
        }
    }
}
