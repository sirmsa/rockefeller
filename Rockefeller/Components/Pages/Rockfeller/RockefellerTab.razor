@page "/rockefeller"
@using Rockefeller.Models
@using Rockefeller.Services
@using Rockefeller.Components.Pages.Rockfeller
@* Preferences not available in MAUI Blazor WebView - using in-memory storage instead *@
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <!-- Header Section -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudGrid>
            <MudItem xs="12" md="8">
                <MudText Typo="Typo.h4" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Psychology" Class="mr-2" />
                    Rockefeller AI Trading System
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">
                    AI-driven cryptocurrency trading with minimal user intervention
                </MudText>
            </MudItem>
            <MudItem xs="12" md="4" Class="d-flex align-center justify-end">
                <MudChip Color="@(isTradingActive ? Color.Success : Color.Warning)" 
                         Icon="@(isTradingActive ? Icons.Material.Filled.PlayArrow : Icons.Material.Filled.Pause)"
                         Size="Size.Large">
                    @(isTradingActive ? "Trading Active" : "Trading Paused")
                </MudChip>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Profile Selection Section -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                    Active Trading Profile
                </MudText>
                
                <MudSelect T="string" Label="Select Profile" 
                           @bind-Value="activeProfileName"
                           OnValueChanged="OnProfileChanged"
                           Class="mb-3">
                    @foreach (var profile in tradingProfiles)
                    {
                        <MudSelectItem Value="@profile.Name">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                                <span>@profile.Name</span>
                                @if (profile.IsActive)
                                {
                                    <MudChip Size="Size.Small" Color="Color.Success" Class="ml-2">
                                        Active
                                    </MudChip>
                                }
                            </div>
                        </MudSelectItem>
                    }
                </MudSelect>
                
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary"
                           OnClick="OnCreateProfileRequested"
                           StartIcon="@Icons.Material.Filled.Add"
                           Class="mr-2">
                    New Profile
                </MudButton>
                
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary"
                           OnClick="OnManageProfilesRequested"
                           StartIcon="@Icons.Material.Filled.Settings"
                           Disabled="@(activeProfile == null)">
                    Manage Profile
                </MudButton>
            </MudItem>
            
            <MudItem xs="12" md="6">
                @if (activeProfile != null)
                {
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Profile Details</MudText>
                    <MudList Dense="true">
                        <MudListItem>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Class="mr-2" />
                                Max Budget: <span class="font-weight-bold">$@activeProfile.MaxBudget.ToString("N2")</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.ShowChart" Class="mr-2" />
                                Active Symbols: <span class="font-weight-bold">@activeProfile.SymbolSettings.Values.Count(s => s.IsActive)</span>
                            </MudText>
                        </MudListItem>
                    </MudList>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Main Dashboard Grid -->
    <MudGrid>
        <!-- Trading Status and Portfolio Summary -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 100%;">
                <MudText Typo="Typo.h6" Class="mb-3">Trading Status</MudText>
                
                <MudButton Variant="Variant.Filled" 
                           Color="@(isTradingActive ? Color.Error : Color.Success)"
                           OnClick="@(isTradingActive ? StopTrading : StartTrading)"
                           Class="mb-3"
                           FullWidth="true"
                           Size="Size.Large">
                    <MudIcon Icon="@(isTradingActive ? Icons.Material.Filled.Stop : Icons.Material.Filled.PlayArrow)" Class="mr-2" />
                    @(isTradingActive ? "Stop Trading" : "Start Trading")
                </MudButton>
                
                <MudDivider Class="my-3" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Portfolio Summary</MudText>
                <MudList Dense="true">
                    <MudListItem>
                        <MudText Typo="Typo.body2">
                            <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Class="mr-2" />
                            Total Value: <span class="text-primary font-weight-bold">$@portfolioSummary.TotalValue.ToString("N2")</span>
                        </MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.body2">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="mr-2" />
                            Unrealized P&L: <span class="@(portfolioSummary.UnrealizedPnL >= 0 ? "text-success" : "text-error") font-weight-bold">$@portfolioSummary.UnrealizedPnL.ToString("N2")</span>
                        </MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.body2">
                            <MudIcon Icon="@Icons.Material.Filled.List" Class="mr-2" />
                            Active Positions: <span class="text-info font-weight-bold">@portfolioSummary.TotalPositions</span>
                        </MudText>
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Symbol Selection for Profile -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 100%;">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Filled.ShowChart" Class="mr-2" />
                    Symbol Selection
                </MudText>
                
                @if (activeProfile != null)
                {
                    <MudSelect T="string" Label="Select Symbol" 
                               @bind-Value="selectedSymbol"
                               OnValueChanged="OnSymbolSelected"
                               Class="mb-3">
                        @foreach (var symbol in availableSymbols)
                        {
                            <MudSelectItem Value="@symbol">
                                <div class="d-flex align-center justify-space-between">
                                    <span>@symbol</span>
                                    @if (activeProfile.SymbolSettings.ContainsKey(symbol))
                                    {
                                        var settings = activeProfile.SymbolSettings[symbol];
                                        <MudChip Size="Size.Small" 
                                                 Color="@(settings.IsActive ? Color.Success : Color.Warning)"
                                                 Class="ml-2">
                                            @(settings.IsActive ? "Active" : "Inactive")
                                        </MudChip>
                                    }
                                </div>
                            </MudSelectItem>
                        }
                    </MudSelect>
                    
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Primary"
                               OnClick="OnManageSymbolsRequested"
                               StartIcon="@Icons.Material.Filled.Tune"
                               Class="mb-3"
                               FullWidth="true">
                        Manage Symbols
                    </MudButton>
                    
                    @if (!string.IsNullOrEmpty(selectedSymbol) && activeProfile.SymbolSettings.ContainsKey(selectedSymbol))
                    {
                        var symbolSettings = activeProfile.SymbolSettings[selectedSymbol];
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Symbol Settings</MudText>
                        <MudList Dense="true">
                            <MudListItem>
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="mr-2" />
                                    Budget Allocation: <span class="font-weight-bold">@(symbolSettings.BudgetAllocation * 100)%</span>
                                </MudText>
                            </MudListItem>
                            <MudListItem>
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Class="mr-2" />
                                    Allocated Amount: <span class="font-weight-bold">$@((activeProfile.MaxBudget * symbolSettings.BudgetAllocation).ToString("N2"))</span>
                                </MudText>
                            </MudListItem>
                        </MudList>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Warning" Class="mb-3">
                        Please select a trading profile first
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>

        <!-- Symbol Analysis -->
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 100%;">
                <MudText Typo="Typo.h6" Class="mb-3">Symbol Analysis</MudText>
                
                @if (!string.IsNullOrEmpty(selectedSymbol))
                {
                    <MudSelect T="string" Label="Select Symbol" 
                               @bind-Value="selectedSymbol"
                               OnValueChanged="OnSymbolSelected"
                               Class="mb-3">
                        @foreach (var symbol in availableSymbols)
                        {
                            <MudSelectItem Value="@symbol">@symbol</MudSelectItem>
                        }
                    </MudSelect>
                }
                
                @if (!string.IsNullOrEmpty(selectedSymbol) && currentAnalysis != null)
                {
                    <MudCard Class="mb-3">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">AI Analysis for @selectedSymbol</MudText>
                            <MudText Typo="Typo.caption">Last updated: @currentAnalysis.AnalysisTime.ToString("HH:mm:ss")</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudText Typo="Typo.subtitle2">Recommendation</MudText>
                                    <MudChip Color="@GetRecommendationColor(currentAnalysis.Recommendation)" 
                                             Size="Size.Large" 
                                             Class="ma-1">
                                        @currentAnalysis.Recommendation
                                    </MudChip>
                                    <MudText Typo="Typo.body2">Confidence: @(currentAnalysis.Confidence * 100)%</MudText>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudText Typo="Typo.subtitle2">Market Regime</MudText>
                                    <MudChip Color="@GetRegimeColor(currentAnalysis.MarketRegime.Type)" 
                                             Size="Size.Medium" 
                                             Class="ma-1">
                                        @currentAnalysis.MarketRegime.Type
                                    </MudChip>
                                    <MudText Typo="Typo.body2">Confidence: @(currentAnalysis.MarketRegime.Confidence * 100)%</MudText>
                                </MudItem>
                            </MudGrid>
                            
                            <MudDivider Class="my-3" />
                            
                            <MudText Typo="Typo.subtitle2" Class="mb-2">AI Reasoning</MudText>
                            <MudText Typo="Typo.body2">@currentAnalysis.Reasoning</MudText>
                            
                            @if (currentAnalysis.TechnicalIndicators != null)
                            {
                                <MudDivider Class="my-3" />
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Technical Indicators</MudText>
                                <MudGrid>
                                    <MudItem xs="12" md="4">
                                        <MudText Typo="Typo.body2">Trend: @currentAnalysis.TechnicalIndicators.TrendDirection</MudText>
                                        <MudText Typo="Typo.body2">Strength: @(currentAnalysis.TechnicalIndicators.TrendStrength * 100)%</MudText>
                                    </MudItem>
                                    <MudItem xs="12" md="4">
                                        <MudText Typo="Typo.body2">Volatility: @(currentAnalysis.TechnicalIndicators.Volatility * 100)%</MudText>
                                        <MudText Typo="Typo.body2">ATR: @(currentAnalysis.TechnicalIndicators.AverageTrueRange.ToString("N4"))</MudText>
                                    </MudItem>
                                    <MudItem xs="12" md="4">
                                        <MudText Typo="Typo.body2">Support Levels: @string.Join(", ", currentAnalysis.TechnicalIndicators.SupportLevels.Select(s => s.ToString("N4")))</MudText>
                                        <MudText Typo="Typo.body2">Resistance Levels: @string.Join(", ", currentAnalysis.TechnicalIndicators.ResistanceLevels.Select(r => r.ToString("N4")))</MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudCardContent>
                    </MudCard>
                }
            </MudPaper>
        </MudItem>

        <!-- Active Positions -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h6" Class="mb-3">Active Positions</MudText>
                
                @if (activePositions.Any())
                {
                    <MudTable Items="@activePositions" Dense="true" Hover="true" Striped="true" 
                              Breakpoint="Breakpoint.Sm" Class="mt-3">
                        <HeaderContent>
                            <MudTh>Symbol</MudTh>
                            <MudTh>Side</MudTh>
                            <MudTh>Size</MudTh>
                            <MudTh>Entry Price</MudTh>
                            <MudTh>Current Price</MudTh>
                            <MudTh>Unrealized P&L</MudTh>
                            <MudTh>ROI</MudTh>
                            <MudTh>Strategy</MudTh>
                            <MudTh>AI Confidence</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Symbol">
                                <MudText Typo="Typo.body2">@context.Symbol</MudText>
                            </MudTd>
                            <MudTd DataLabel="Side">
                                <MudChip Color="@(context.Side == "LONG" ? Color.Success : Color.Error)" 
                                         Size="Size.Small">
                                    @context.Side
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Size">
                                <MudText Typo="Typo.body2">@context.Size.ToString("N4")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Entry Price">
                                <MudText Typo="Typo.body2">$@context.EntryPrice.ToString("N4")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Current Price">
                                <MudText Typo="Typo.body2">$@context.CurrentPrice.ToString("N4")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Unrealized P&L">
                                <MudText Typo="Typo.body2" 
                                         Color="@(context.UnrealizedPnL >= 0 ? Color.Success : Color.Error)">
                                    $@context.UnrealizedPnL.ToString("N2")
                                </MudText>
                            </MudTd>
                            <MudTd DataLabel="ROI">
                                <MudText Typo="Typo.body2" 
                                         Color="@(context.UnrealizedROI >= 0 ? Color.Success : Color.Error)">
                                    @(context.UnrealizedROI * 100).ToString("N2")%
                                </MudText>
                            </MudTd>
                            <MudTd DataLabel="Strategy">
                                <MudText Typo="Typo.body2">@context.Strategy</MudText>
                            </MudTd>
                            <MudTd DataLabel="AI Confidence">
                                <MudText Typo="Typo.body2">@(context.EntryConfidence * 100)%</MudText>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButton Size="Size.Small" 
                                           Variant="Variant.Outlined" 
                                           Color="Color.Error"
                                           OnClick="@(() => ClosePosition(context.Id))">
                                    Close
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">No active positions</MudAlert>
                }
            </MudPaper>
        </MudItem>

        <!-- AI Performance Metrics and Recent Decisions -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 100%;">
                <MudText Typo="Typo.h6" Class="mb-3">AI Performance Metrics</MudText>
                
                <MudGrid>
                    <MudItem xs="6">
                        <MudPaper Class="pa-3 text-center" Elevation="0" Style="background: rgba(220, 38, 38, 0.1);">
                            <MudText Typo="Typo.h4" Color="Color.Primary">@(aiSuccessRate * 100)%</MudText>
                            <MudText Typo="Typo.caption">Success Rate</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="pa-3 text-center" Elevation="0" Style="background: rgba(26, 32, 44, 0.1);">
                            <MudText Typo="Typo.h4" Color="Color.Secondary">@averageConfidence.ToString("N1")%</MudText>
                            <MudText Typo="Typo.caption">Avg Confidence</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="pa-3 text-center" Elevation="0" Style="background: rgba(59, 130, 246, 0.1);">
                            <MudText Typo="Typo.h4" Color="Color.Info">@totalSignals</MudText>
                            <MudText Typo="Typo.caption">Total Signals</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="pa-3 text-center" Elevation="0" Style="background: rgba(245, 158, 11, 0.1);">
                            <MudText Typo="Typo.h4" Color="Color.Warning">@(profitFactor.ToString("N2"))</MudText>
                            <MudText Typo="Typo.caption">Profit Factor</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="1" Style="height: 100%;">
                <MudText Typo="Typo.h6" Class="mb-3">Recent AI Decisions</MudText>
                
                @if (recentDecisions.Any())
                {
                    <MudList Dense="true">
                        @foreach (var decision in recentDecisions.Take(5))
                        {
                            <MudListItem>
                                <div class="d-flex align-center">
                                    <MudChip Color="@GetRecommendationColor(decision.Decision)" 
                                             Size="Size.Small" 
                                             Class="ma-1">
                                        @decision.Decision
                                    </MudChip>
                                    <MudText Typo="Typo.body2">@decision.Symbol</MudText>
                                    <MudSpacer />
                                    <MudText Typo="Typo.caption">@decision.Timestamp.ToString("HH:mm")</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">No recent decisions</MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Profile Creation Dialog -->
    <ProfileCreationDialog @bind-IsVisible="showProfileCreationDialog"
                          NewProfile="newProfile"
                          OnSaveRequested="OnProfileCreated" />
</MudContainer>

@code {
    // Services
    [Inject] private IRockefellerAIService RockefellerAIService { get; set; } = default!;
    [Inject] private ITradingService TradingService { get; set; } = default!;
    [Inject] private IMarketDataService MarketDataService { get; set; } = default!;
    [Inject] private IAnalyticsService AnalyticsService { get; set; } = default!;
    [Inject] private IDataStorageService DataStorageService { get; set; } = default!;
    [Inject] private INotificationService NotificationService { get; set; } = default!;
    [Inject] private IRiskManagementService RiskManagementService { get; set; } = default!;

    // State variables
    private bool isTradingActive = false;
    private string selectedSymbol = string.Empty;
    private AIStrategyAnalysis? currentAnalysis;
    private PortfolioSummary portfolioSummary = new();
    private List<RockefellerPosition> activePositions = [];
    private List<AIAnalysisRecord> recentDecisions = [];
    
    // Performance metrics
    private decimal aiSuccessRate = 0.0m;
    private decimal averageConfidence = 0.0m;
    private int totalSignals = 0;
    private decimal profitFactor = 0.0m;

    // In-memory storage for preferences (since Preferences is not available in MAUI Blazor WebView)
    private static readonly Dictionary<string, string> _preferences = new();

    // Trading profiles
    private List<TradingProfile> tradingProfiles = [];
    private string activeProfileName = string.Empty;
    private TradingProfile? activeProfile;
    private List<string> availableSymbols = [];
    
    // Profile management
    private bool showProfileCreationDialog = false;
    private TradingProfile newProfile = new();

    // Timers
    private Timer? updateTimer;
    private Timer? analysisTimer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("RockefellerTab: Starting initialization...");

            // Initialize symbols first
            try
            {
                await InitializeSymbolsAsync();
                System.Diagnostics.Debug.WriteLine("RockefellerTab: Symbols initialized successfully");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"RockefellerTab: Symbol initialization failed: {ex.Message}");
                // Continue with default symbols
                availableSymbols = GetDefaultSymbols();
            }

            // Initialize trading profiles
            try
            {
                InitializeTradingProfiles();
                System.Diagnostics.Debug.WriteLine("RockefellerTab: Trading profiles initialized successfully");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"RockefellerTab: Trading profiles initialization failed: {ex.Message}");
                // Create basic profiles as fallback
                tradingProfiles = CreateTradingProfilesFromConfig();
                if (tradingProfiles.Any())
                {
                    tradingProfiles[0].IsActive = true;
                    activeProfileName = tradingProfiles[0].Name;
                }
            }

            // Load trading profiles
            try
            {
                await LoadTradingProfilesAsync();
                System.Diagnostics.Debug.WriteLine("RockefellerTab: Trading profiles loaded successfully");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"RockefellerTab: Trading profiles loading failed: {ex.Message}");
            }

            // Load analytics data
            try
            {
                await LoadAnalyticsDataAsync();
                System.Diagnostics.Debug.WriteLine("RockefellerTab: Analytics data loaded successfully");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"RockefellerTab: Analytics data loading failed: {ex.Message}");
            }

            System.Diagnostics.Debug.WriteLine("RockefellerTab: Initialization completed successfully");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"RockefellerTab: Critical initialization error: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"RockefellerTab: Stack trace: {ex.StackTrace}");

            // Don't re-throw - let the component render with default values
            // This prevents the entire app from crashing
        }

        // Start update timers
        StartUpdateTimers();
    }

    private void StartUpdateTimers()
    {
        // Update portfolio and positions every 5 seconds
        updateTimer = new Timer(async _ => await UpdatePortfolioDataAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        
        // Update AI analysis every 30 seconds
        analysisTimer = new Timer(async _ => await UpdateAIAnalysisAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    private async Task UpdatePortfolioDataAsync()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                // Update portfolio summary
                portfolioSummary = await TradingService.GetPortfolioSummaryAsync();
                
                // Update active positions
                var positions = await TradingService.GetActivePositionsAsync();
                activePositions.Clear();
                activePositions.AddRange(positions);
                
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error updating portfolio data: {ex.Message}");
        }
    }

    private async Task UpdateAIAnalysisAsync()
    {
        if (string.IsNullOrEmpty(selectedSymbol)) return;
        
        try
        {
            await InvokeAsync(async () =>
            {
                // Update current analysis
                currentAnalysis = await RockefellerAIService.AnalyzeCurrentMarketConditionsAsync(selectedSymbol);
                
                // Update recent decisions
                await LoadRecentDecisionsAsync();
                
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error updating AI analysis: {ex.Message}");
        }
    }

    private async Task OnSymbolSelected(string symbol)
    {
        if (string.IsNullOrEmpty(symbol)) return;
        
        selectedSymbol = symbol;
        
        try
        {
            // Get AI analysis for the selected symbol
            currentAnalysis = await RockefellerAIService.AnalyzeCurrentMarketConditionsAsync(symbol);
            
            // Load recent decisions for this symbol
            await LoadRecentDecisionsAsync();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error analyzing symbol {symbol}: {ex.Message}");
            await NotificationService.ShowNotification($"Error analyzing {symbol}: {ex.Message}", "ERROR");
        }
    }

    private Task LoadRecentDecisionsAsync()
    {
        try
        {
            // In a real implementation, this would load from the data storage service
            // For now, we'll create some mock data
            recentDecisions.Clear();
            
            if (!string.IsNullOrEmpty(selectedSymbol))
            {
                // Mock recent decisions
                recentDecisions.AddRange(new[]
                {
                    new AIAnalysisRecord
                    {
                        Symbol = selectedSymbol,
                        Decision = "BUY",
                        Confidence = 0.8m,
                        Reasoning = "Strong technical indicators with high confidence",
                        Timestamp = DateTime.UtcNow.AddMinutes(-15)
                    },
                    new AIAnalysisRecord
                    {
                        Symbol = selectedSymbol,
                        Decision = "HOLD",
                        Confidence = 0.6m,
                        Reasoning = "Mixed signals, waiting for clearer direction",
                        Timestamp = DateTime.UtcNow.AddMinutes(-30)
                    }
                });
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading recent decisions: {ex.Message}");
        }
        
        return Task.CompletedTask;
    }

    private async Task StartTrading()
    {
        try
        {
            bool success = await TradingService.StartTradingAsync();
            if (success)
            {
                isTradingActive = true;
                await NotificationService.ShowNotification("Trading started successfully", "SUCCESS");
            }
            else
            {
                await NotificationService.ShowNotification("Failed to start trading", "ERROR");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error starting trading: {ex.Message}");
            await NotificationService.ShowNotification($"Error starting trading: {ex.Message}", "ERROR");
        }
    }

    private async Task StopTrading()
    {
        try
        {
            bool success = await TradingService.StopTradingAsync();
            if (success)
            {
                isTradingActive = false;
                await NotificationService.ShowNotification("Trading stopped successfully", "SUCCESS");
            }
            else
            {
                await NotificationService.ShowNotification("Failed to stop trading", "ERROR");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error stopping trading: {ex.Message}");
            await NotificationService.ShowNotification($"Error stopping trading: {ex.Message}", "ERROR");
        }
    }

    private async Task ClosePosition(string positionId)
    {
        try
        {
            // Get current market price for the position
            var position = activePositions.FirstOrDefault(p => p.Id == positionId);
            if (position == null) return;
            
            var marketData = await MarketDataService.GetMarketDataAsync(position.Symbol);
            bool success = await TradingService.ClosePositionAsync(positionId, marketData.Last, "Manual close");
            
            if (success)
            {
                await NotificationService.ShowNotification($"Position closed successfully", "SUCCESS");
                await UpdatePortfolioDataAsync();
            }
            else
            {
                await NotificationService.ShowNotification("Failed to close position", "ERROR");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error closing position: {ex.Message}");
            await NotificationService.ShowNotification($"Error closing position: {ex.Message}", "ERROR");
        }
    }

    private Color GetRecommendationColor(string recommendation)
    {
        return recommendation switch
        {
            "BUY" => Color.Success,
            "SELL" => Color.Error,
            "HOLD" => Color.Warning,
            "WAIT" => Color.Info,
            _ => Color.Default
        };
    }

    private Color GetRegimeColor(string regimeType)
    {
        return regimeType switch
        {
            "TRENDING" => Color.Success,
            "RANGING" => Color.Warning,
            "VOLATILE" => Color.Error,
            _ => Color.Default
        };
    }

    // Helper methods for initialization
    private Task InitializeSymbolsAsync()
    {
        // In a real implementation, this would load from the market data service
        availableSymbols.Clear();
        availableSymbols.AddRange(GetDefaultSymbols());
        
        return Task.CompletedTask;
    }

    private List<string> GetDefaultSymbols()
    {
        return new List<string> { "BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT", "LINKUSDT" };
    }

    private void InitializeTradingProfiles()
    {
        try
        {
            tradingProfiles.Clear();
            
            // Create default trading profiles
            var conservativeProfile = new TradingProfile
            {
                Name = "Conservative",
                MaxBudget = 10000m,
                IsActive = true
            };
            
            var moderateProfile = new TradingProfile
            {
                Name = "Moderate",
                MaxBudget = 15000m,
                IsActive = false
            };
            
            var aggressiveProfile = new TradingProfile
            {
                Name = "Aggressive",
                MaxBudget = 20000m,
                IsActive = false
            };
            
            tradingProfiles.AddRange(new[] { conservativeProfile, moderateProfile, aggressiveProfile });
            
            // Set active profile
            if (tradingProfiles.Any())
            {
                var activeProfileObj = tradingProfiles.First(p => p.IsActive);
                activeProfileName = activeProfileObj.Name;
                activeProfile = activeProfileObj;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in InitializeTradingProfiles: {ex.Message}");
            // Ensure all profiles have at least basic symbol settings
            foreach (TradingProfile profile in tradingProfiles)
            {
                foreach (string symbol in availableSymbols)
                {
                    if (!profile.SymbolSettings.ContainsKey(symbol))
                    {
                        profile.SymbolSettings[symbol] = GetDefaultSymbolSettings(symbol);
                    }
                }
            }
        }
    }

    // Profile management methods
    private async Task OnProfileChanged(string profileName)
    {
        try
        {
            if (string.IsNullOrEmpty(profileName)) return;
            
            // Find the selected profile
            var profile = tradingProfiles.FirstOrDefault(p => p.Name == profileName);
            if (profile == null) return;
            
            // Update active profile
            activeProfileName = profileName;
            activeProfile = profile;
            
            // Update profile active status
            foreach (var p in tradingProfiles)
            {
                p.IsActive = (p.Name == profileName);
            }
            
            // Ensure the profile has symbol settings for all available symbols
            foreach (string symbol in availableSymbols)
            {
                if (!profile.SymbolSettings.ContainsKey(symbol))
                {
                    profile.SymbolSettings[symbol] = GetDefaultSymbolSettings(symbol);
                }
            }
            
                            await NotificationService.ShowNotification($"Profile '{profileName}' activated", "SUCCESS");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error changing profile: {ex.Message}");
            await NotificationService.ShowNotification($"Error changing profile: {ex.Message}", "ERROR");
        }
    }

    private void OnCreateProfileRequested()
    {
        try
        {
            // Reset new profile
            newProfile = new TradingProfile
            {
                Name = string.Empty,
                MaxBudget = 10000m,
                IsActive = false
            };
            
            showProfileCreationDialog = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error creating profile: {ex.Message}");
            NotificationService.ShowNotification($"Error creating profile: {ex.Message}", "ERROR");
        }
    }

    private async Task OnProfileCreated(TradingProfile profile)
    {
        try
        {
            // Validate profile name uniqueness
            if (tradingProfiles.Any(p => p.Name.Equals(profile.Name, StringComparison.OrdinalIgnoreCase)))
            {
                await NotificationService.ShowNotification($"Profile name '{profile.Name}' already exists", "ERROR");
                return;
            }
            
            // Add profile to the list
            tradingProfiles.Add(profile);
            
            // Initialize symbol settings for the new profile
            foreach (string symbol in availableSymbols)
            {
                profile.SymbolSettings[symbol] = GetDefaultSymbolSettings(symbol);
            }
            
            // If this is the first profile, make it active
            if (tradingProfiles.Count == 1)
            {
                profile.IsActive = true;
                activeProfileName = profile.Name;
                activeProfile = profile;
            }
            
            await NotificationService.ShowNotification($"Profile '{profile.Name}' created successfully", "SUCCESS");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error creating profile: {ex.Message}");
            await NotificationService.ShowNotification($"Error creating profile: {ex.Message}", "ERROR");
        }
    }

    private async Task OnManageProfilesRequested()
    {
        try
        {
            // TODO: Implement profile management dialog
            await NotificationService.ShowNotification("Profile management coming soon", "INFO");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error managing profiles: {ex.Message}");
            await NotificationService.ShowNotification($"Error managing profiles: {ex.Message}", "ERROR");
        }
    }

    private async Task OnManageSymbolsRequested()
    {
        try
        {
            // TODO: Implement symbol management dialog
            await NotificationService.ShowNotification("Symbol management coming soon", "INFO");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error managing symbols: {ex.Message}");
            await NotificationService.ShowNotification($"Error managing symbols: {ex.Message}", "ERROR");
        }
    }

    private Task LoadTradingProfilesAsync()
    {
        try
        {
            // Try to load profiles from data storage service first
            // Note: In a real implementation, we would have a specific method for trading profiles
            // For now, we'll use in-memory storage as backup
            _preferences.TryGetValue("TradingProfiles", out string? profilesJson);
            if (!string.IsNullOrEmpty(profilesJson))
            {
                // TODO: Deserialize profiles from JSON
                System.Diagnostics.Debug.WriteLine("RockefellerTab: Loaded trading profiles from storage");
            }
            else
            {
                // Create default profiles if none exist
                InitializeTradingProfiles();
                
                // TODO: Serialize profiles to JSON and save to data storage
                // string profilesJson = JsonSerializer.Serialize(tradingProfiles);
                // _preferences["TradingProfiles"] = profilesJson;

                // For now, just use a placeholder
                _preferences["TradingProfiles"] = "saved";

                // In a full implementation, we would also save to the data storage service
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading trading profiles: {ex.Message}");
            // Create basic profiles as fallback
            InitializeTradingProfiles();
        }
        
        return Task.CompletedTask;
    }

    private async Task LoadAnalyticsDataAsync()
    {
        try
        {
            var analyticsData = await AnalyticsService.GetAnalyticsDataAsync();
            
            // Update performance metrics
            aiSuccessRate = analyticsData.WinRate;
            profitFactor = analyticsData.ProfitFactor;
            totalSignals = analyticsData.TotalTrades;
            
            // Calculate average confidence from recent trades
            if (analyticsData.RecentTrades.Any())
            {
                averageConfidence = analyticsData.RecentTrades.Average(t => t.EntryConfidence);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading analytics data: {ex.Message}");
            // Use default values
            aiSuccessRate = 0.65m;
            averageConfidence = 0.75m;
            totalSignals = 0;
            profitFactor = 1.2m;
        }
    }

    private List<TradingProfile> CreateTradingProfilesFromConfig()
    {
        var profiles = new List<TradingProfile>();
        
        // Create basic profiles
        var basicProfile = new TradingProfile
        {
            Name = "Basic",
            MaxBudget = 10000m,
            IsActive = true
        };
        
        profiles.Add(basicProfile);
        return profiles;
    }

    private SymbolSettings GetDefaultSymbolSettings(string symbol)
    {
        return new SymbolSettings
        {
            Symbol = symbol,
            BudgetAllocation = 0.20m, // Default 20% allocation per symbol
            IsActive = true
        };
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
        analysisTimer?.Dispose();
    }
}
