<div class="rockefeller-analytics-drawer @(IsOpen ? "open" : "")">
    <div class="rockefeller-drawer-header">
        <div class="rockefeller-flex-between">
            <h3 class="rockefeller-heading">
                <MudIcon Icon="@Icons.Material.Filled.Analytics" Size="Size.Small" style="margin-right: 8px;"/>
                Live Analytics Dashboard
            </h3>
            <MudIconButton Icon="@Icons.Material.Filled.Close"
                           Size="Size.Small"
                           OnClick="@OnClose"
                           Class="rockefeller-drawer-close"/>
        </div>
        <p class="rockefeller-drawer-subtitle">Real-time portfolio performance and AI insights</p>
    </div>

    <div class="rockefeller-drawer-content">
        <!-- Portfolio Overview -->
        <div class="rockefeller-drawer-section">
            <h4 class="rockefeller-drawer-subtitle">
                <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Size="Size.Small" style="margin-right: 8px;"/>
                Portfolio Overview
            </h4>
            <div class="rockefeller-drawer-metrics">
                <div class="rockefeller-drawer-metric rockefeller-drawer-metric-primary">
                    <div class="rockefeller-drawer-metric-label">Total Portfolio Value</div>
                    <div class="rockefeller-drawer-metric-value rockefeller-price">$@PortfolioValue.ToString("N2")</div>
                    <div
                        class="rockefeller-drawer-metric-change @(PortfolioChange24h >= 0 ? "rockefeller-text-success" : "rockefeller-text-danger")">
                        <MudIcon
                            Icon="@(PortfolioChange24h >= 0 ? Icons.Material.Filled.TrendingUp : Icons.Material.Filled.TrendingDown)"
                            Size="Size.Small"/>
                        @(PortfolioChange24h >= 0 ? "+" : "")@PortfolioChange24h.ToString("N2")%
                    </div>
                </div>
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Active Positions</div>
                    <div class="rockefeller-drawer-metric-value">@ActivePositionsCount</div>
                    <div class="rockefeller-drawer-metric-subtitle">Open trades</div>
                </div>
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Available Balance</div>
                    <div class="rockefeller-drawer-metric-value rockefeller-price">
                        $@(PortfolioValue * 0.15m).ToString("N2")
                    </div>
                    <div class="rockefeller-drawer-metric-subtitle">Ready to trade</div>
                </div>
            </div>
        </div>

        <!-- Trading Performance -->
        <div class="rockefeller-drawer-section">
            <h4 class="rockefeller-drawer-subtitle">
                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" style="margin-right: 8px;"/>
                Trading Performance
            </h4>
            <div class="rockefeller-drawer-metrics">
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Win Rate</div>
                    <div
                        class="rockefeller-drawer-metric-value @GetPerformanceClass(WinRate)">@WinRate.ToString("N1")%
                    </div>
                    <div class="rockefeller-drawer-metric-subtitle">@GetPerformanceDescription(WinRate)</div>
                </div>
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Profit Factor</div>
                    <div
                        class="rockefeller-drawer-metric-value @GetPerformanceClass(ProfitFactor * 100)">@ProfitFactor.ToString("N2")</div>
                    <div class="rockefeller-drawer-metric-subtitle">@GetProfitFactorDescription(ProfitFactor)</div>
                </div>
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Max Drawdown</div>
                    <div class="rockefeller-drawer-metric-value rockefeller-text-danger">@MaxDrawdown.ToString("N2")%
                    </div>
                    <div class="rockefeller-drawer-metric-subtitle">Risk level: @GetRiskLevel(MaxDrawdown)</div>
                </div>
            </div>

            <!-- Performance Chart Placeholder -->
            <div class="rockefeller-drawer-chart-placeholder">
                <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Large"/>
                <span>Performance Chart</span>
            </div>
        </div>

        <!-- AI Performance -->
        <div class="rockefeller-drawer-section">
            <h4 class="rockefeller-drawer-subtitle">
                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" style="margin-right: 8px;"/>
                AI Engine Performance
            </h4>
            <div class="rockefeller-drawer-metrics">
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Signal Accuracy</div>
                    <div
                        class="rockefeller-drawer-metric-value @GetPerformanceClass(SignalAccuracy)">@SignalAccuracy.ToString("N1")%
                    </div>
                    <div class="rockefeller-drawer-metric-subtitle">@GetAccuracyDescription(SignalAccuracy)</div>
                </div>
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Average Confidence</div>
                    <div
                        class="rockefeller-drawer-metric-value @GetPerformanceClass(AverageConfidence)">@AverageConfidence.ToString("N1")%
                    </div>
                    <div class="rockefeller-drawer-metric-subtitle">@GetConfidenceDescription(AverageConfidence)</div>
                </div>
                <div class="rockefeller-drawer-metric">
                    <div class="rockefeller-drawer-metric-label">Signals Today</div>
                    <div class="rockefeller-drawer-metric-value">@SignalsToday</div>
                    <div class="rockefeller-drawer-metric-subtitle">@GetSignalsDescription(SignalsToday)</div>
                </div>
            </div>

            <!-- AI Confidence Meter -->
            <div class="rockefeller-drawer-confidence-meter">
                <div class="rockefeller-drawer-confidence-label">AI Confidence Trend</div>
                <div class="rockefeller-drawer-confidence-bar">
                    <div class="rockefeller-drawer-confidence-fill" style="width: @AverageConfidence%"></div>
                </div>
                <div class="rockefeller-drawer-confidence-text">@GetConfidenceTrend(AverageConfidence)</div>
            </div>
        </div>

        <!-- Market Overview -->
        <div class="rockefeller-drawer-section">
            <h4 class="rockefeller-drawer-subtitle">
                <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Small" style="margin-right: 8px;"/>
                Market Overview
            </h4>
            <div class="rockefeller-drawer-metrics">
                <div class="rockefeller-drawer-metric rockefeller-drawer-metric-market">
                    <div class="rockefeller-drawer-metric-label">BTC/USDT</div>
                    <div class="rockefeller-drawer-metric-value rockefeller-price">$@BtcPrice.ToString("N2")</div>
                    <div class="rockefeller-drawer-metric-change rockefeller-text-success">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small"/>
                        +2.45%
                    </div>
                </div>
                <div class="rockefeller-drawer-metric rockefeller-drawer-metric-market">
                    <div class="rockefeller-drawer-metric-label">ETH/USDT</div>
                    <div class="rockefeller-drawer-metric-value rockefeller-price">$@EthPrice.ToString("N2")</div>
                    <div class="rockefeller-drawer-metric-change rockefeller-text-danger">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingDown" Size="Size.Small"/>
                        -1.23%
                    </div>
                </div>
                <div class="rockefeller-drawer-metric rockefeller-drawer-metric-market">
                    <div class="rockefeller-drawer-metric-label">SOL/USDT</div>
                    <div class="rockefeller-drawer-metric-value rockefeller-price">$@SolPrice.ToString("N2")</div>
                    <div class="rockefeller-drawer-metric-change rockefeller-text-success">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small"/>
                        +5.67%
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="rockefeller-drawer-section">
            <h4 class="rockefeller-drawer-subtitle">
                <MudIcon Icon="@Icons.Material.Filled.Bolt" Size="Size.Small" style="margin-right: 8px;"/>
                Quick Actions
            </h4>
            <div class="rockefeller-drawer-actions">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           Class="rockefeller-btn-outline rockefeller-btn-sm">
                    Refresh Data
                </MudButton>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Download"
                           Class="rockefeller-btn-outline rockefeller-btn-sm">
                    Export Report
                </MudButton>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Info"
                           StartIcon="@Icons.Material.Filled.Settings"
                           Class="rockefeller-btn-outline rockefeller-btn-sm">
                    Configure
                </MudButton>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    // Portfolio data
    [Parameter] public decimal PortfolioValue { get; set; } = 100000.0m;
    [Parameter] public decimal PortfolioChange24h { get; set; } = 2.5m;
    [Parameter] public int ActivePositionsCount { get; set; } = 3;

    // Trading performance
    [Parameter] public decimal WinRate { get; set; } = 65.5m;
    [Parameter] public decimal ProfitFactor { get; set; } = 1.85m;
    [Parameter] public decimal MaxDrawdown { get; set; } = 8.2m;

    // AI performance
    [Parameter] public decimal SignalAccuracy { get; set; } = 72.3m;
    [Parameter] public decimal AverageConfidence { get; set; } = 78.5m;
    [Parameter] public int SignalsToday { get; set; } = 12;

    // Market prices
    [Parameter] public decimal BtcPrice { get; set; } = 43256.78m;
    [Parameter] public decimal EthPrice { get; set; } = 2847.65m;
    [Parameter] public decimal SolPrice { get; set; } = 98.45m;

    // Helper methods for dynamic styling and descriptions
    private string GetPerformanceClass(decimal value)
    {
        return value switch
        {
            >= 80 => "rockefeller-text-success",
            >= 60 => "rockefeller-text-warning",
            _ => "rockefeller-text-danger"
        };
    }

    private string GetPerformanceDescription(decimal winRate)
    {
        return winRate switch
        {
            >= 80 => "Excellent",
            >= 60 => "Good",
            >= 40 => "Fair",
            _ => "Needs Improvement"
        };
    }

    private string GetProfitFactorDescription(decimal profitFactor)
    {
        return profitFactor switch
        {
            >= 2.0m => "Very Profitable",
            >= 1.5m => "Profitable",
            >= 1.0m => "Break Even",
            _ => "Unprofitable"
        };
    }

    private string GetRiskLevel(decimal drawdown)
    {
        return drawdown switch
        {
            <= 5 => "Low",
            <= 10 => "Medium",
            <= 20 => "High",
            _ => "Critical"
        };
    }

    private string GetAccuracyDescription(decimal accuracy)
    {
        return accuracy switch
        {
            >= 80 => "Highly Accurate",
            >= 70 => "Accurate",
            >= 60 => "Moderate",
            _ => "Low Accuracy"
        };
    }

    private string GetConfidenceDescription(decimal confidence)
    {
        return confidence switch
        {
            >= 80 => "Very Confident",
            >= 70 => "Confident",
            >= 60 => "Moderate",
            _ => "Low Confidence"
        };
    }

    private string GetSignalsDescription(int signals)
    {
        return signals switch
        {
            >= 20 => "High Activity",
            >= 10 => "Active",
            >= 5 => "Moderate",
            _ => "Low Activity"
        };
    }

    private string GetConfidenceTrend(decimal confidence)
    {
        return confidence switch
        {
            >= 80 => "Strong upward trend",
            >= 70 => "Steady improvement",
            >= 60 => "Stable performance",
            _ => "Needs attention"
        };
    }

}
